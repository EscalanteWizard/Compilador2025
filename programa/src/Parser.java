
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\054\002\000\002\003" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\003\000" +
    "\002\046\004\000\002\046\003\000\002\046\003\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\003\000\002\006\005" +
    "\000\002\006\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\005\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\005" +
    "\000\002\006\004\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\006\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\005" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\021\003\000\002\021\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\005\000\002\011\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\006\000\002\010\005\000\002\031\007" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\003\000\002\035\003\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\005\006\000\002\005\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\050\006\000\002\050\006\000" +
    "\002\050\006\000\002\050\006\000\002\050\006\000\002" +
    "\051\004\000\002\052\004\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\012\010\000\002\012\011\000\002\044\005\000" +
    "\002\044\003\000\002\045\006\000\002\045\005\000\002" +
    "\032\005\000\002\013\007\000\002\013\011\000\002\024" +
    "\006\000\002\023\002\000\002\023\003\000\002\023\004" +
    "\000\002\022\011\000\002\022\012\000\002\026\011\000" +
    "\002\027\011\000\002\027\011\000\002\030\015\000\002" +
    "\030\015\000\002\015\010\000\002\015\010\000\002\047" +
    "\011\000\002\047\011\000\002\016\010\000\002\016\007" +
    "\000\002\020\005\000\002\020\003\000\002\017\004\000" +
    "\002\053\004\000\002\041\006\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\043\004\000\002\043\003\000\002\014\006" +
    "\000\002\014\006\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\012\003\000\023\000\047\000\050\000\001" +
    "\002\000\012\003\020\023\011\047\021\050\022\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\014\002\ufff7\003\020\023\011\047\021\050\022\001\002" +
    "\000\010\004\276\027\275\104\u015d\001\002\000\014\041" +
    "\u0156\042\u0155\043\u0154\044\u0153\045\u0152\001\002\000\014" +
    "\002\ufff6\003\020\023\011\047\021\050\022\001\002\000" +
    "\004\016\u0149\001\002\000\004\016\235\001\002\000\014" +
    "\002\ufff0\003\020\023\011\047\021\050\022\001\002\000" +
    "\014\002\ufff9\003\020\023\011\047\021\050\022\001\002" +
    "\000\004\104\231\001\002\000\012\003\020\023\011\047" +
    "\021\050\022\001\002\000\010\041\203\043\202\050\201" +
    "\001\002\000\014\041\173\042\172\043\171\044\170\045" +
    "\167\001\002\000\004\002\uffff\001\002\000\010\004\027" +
    "\027\026\104\030\001\002\000\110\002\uff8c\003\uff8c\004" +
    "\uff8c\006\uff8c\015\uff8c\017\uff8c\023\uff8c\024\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035" +
    "\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\047\uff8c\050\uff8c" +
    "\052\uff8c\053\uff8c\055\uff8c\056\uff8c\060\uff8c\062\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\077\uff8c\103\uff8c" +
    "\001\002\000\046\004\036\006\033\015\042\024\063\026" +
    "\043\030\055\031\046\032\054\033\067\034\057\035\062" +
    "\040\051\042\047\052\037\053\061\073\044\077\060\103" +
    "\064\001\002\000\004\027\032\001\002\000\014\002\ufff4" +
    "\003\020\023\011\047\021\050\022\001\002\000\004\002" +
    "\ufffb\001\002\000\046\004\036\006\033\015\042\024\063" +
    "\026\043\030\055\031\046\032\054\033\067\034\057\035" +
    "\062\040\051\042\047\052\037\053\061\073\044\077\060" +
    "\103\064\001\002\000\010\015\042\042\047\077\162\001" +
    "\002\000\060\005\uffb2\006\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\025\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\062\uffb2\066\uffb2" +
    "\074\uffb2\076\uffb2\100\uffb2\101\uffb2\104\uffb2\001\002\000" +
    "\004\104\160\001\002\000\066\005\uffb6\006\uffb6\007\135" +
    "\010\137\011\uffb6\012\uffb6\013\uffb6\014\uffb6\025\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\073" +
    "\037\074\040\uffb6\062\uffb6\066\uffb6\074\uffb6\075\140\077" +
    "\136\100\uffb6\101\uffb6\104\uffb6\001\002\000\024\025\uffa7" +
    "\036\uffa7\037\uffa7\062\uffa7\066\uffa7\074\uffa7\100\uffa7\101" +
    "\uffa7\104\uffa7\001\002\000\060\005\uffba\006\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\025\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\062\uffba\066\uffba\074\uffba\076\uffba\100\uffba\101\uffba\104" +
    "\uffba\001\002\000\060\005\uffb3\006\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\025\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\062\uffb3" +
    "\066\uffb3\074\uffb3\076\uffb3\100\uffb3\101\uffb3\104\uffb3\001" +
    "\002\000\060\005\uffc4\006\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\025\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\062\uffc4\066\uffc4" +
    "\074\uffc4\076\uffc4\100\uffc4\101\uffc4\104\uffc4\001\002\000" +
    "\060\005\uffb8\006\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\025\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\062\uffb8\066\uffb8\074\uffb8" +
    "\076\uffb8\100\uffb8\101\uffb8\104\uffb8\001\002\000\046\004" +
    "\036\006\033\015\042\024\063\026\043\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\042\047\052" +
    "\037\053\061\073\044\077\060\103\064\001\002\000\042" +
    "\005\116\006\115\025\uffac\030\055\031\046\032\054\033" +
    "\067\034\057\035\062\040\051\062\uffac\066\uffac\074\uffac" +
    "\100\uffac\101\uffac\104\uffac\001\002\000\044\004\uff9f\006" +
    "\uff9f\015\uff9f\024\uff9f\026\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\040\uff9f\042\uff9f\052\uff9f\053" +
    "\uff9f\077\uff9f\103\uff9f\001\002\000\060\005\uffc3\006\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\025\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\062\uffc3\066\uffc3\074\uffc3\076\uffc3\100\uffc3\101" +
    "\uffc3\104\uffc3\001\002\000\020\025\uffab\062\uffab\066\uffab" +
    "\074\uffab\100\uffab\101\uffab\104\uffab\001\002\000\044\004" +
    "\uff9c\006\uff9c\015\uff9c\024\uff9c\026\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\040\uff9c\042\uff9c\052" +
    "\uff9c\053\uff9c\077\uff9c\103\uff9c\001\002\000\060\005\uffbf" +
    "\006\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\025\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\062\uffbf\066\uffbf\074\uffbf\076\uffbf\100" +
    "\uffbf\101\uffbf\104\uffbf\001\002\000\044\004\110\006\033" +
    "\015\042\024\063\026\043\030\055\031\046\032\054\033" +
    "\067\034\057\035\062\040\051\042\047\052\037\053\061" +
    "\077\060\103\064\001\002\000\044\004\uffa0\006\uffa0\015" +
    "\uffa0\024\uffa0\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\040\uffa0\042\uffa0\052\uffa0\053\uffa0\077" +
    "\uffa0\103\uffa0\001\002\000\044\004\uffa2\006\uffa2\015\uffa2" +
    "\024\uffa2\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\040\uffa2\042\uffa2\052\uffa2\053\uffa2\077\uffa2" +
    "\103\uffa2\001\002\000\060\005\uffc2\006\uffc2\011\126\012" +
    "\125\013\123\014\124\025\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\062" +
    "\uffc2\066\uffc2\074\uffc2\076\uffc2\100\uffc2\101\uffc2\104\uffc2" +
    "\001\002\000\044\004\uff9d\006\uff9d\015\uff9d\024\uff9d\026" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\040\uff9d\042\uff9d\052\uff9d\053\uff9d\077\uff9d\103\uff9d\001" +
    "\002\000\044\004\110\006\033\015\042\024\063\026\043" +
    "\030\055\031\046\032\054\033\067\034\057\035\062\040" +
    "\051\042\047\052\037\053\061\077\060\103\064\001\002" +
    "\000\024\025\uffa6\036\uffa6\037\uffa6\062\uffa6\066\uffa6\074" +
    "\uffa6\100\uffa6\101\uffa6\104\uffa6\001\002\000\044\004\uff9e" +
    "\006\uff9e\015\uff9e\024\uff9e\026\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\040\uff9e\042\uff9e\052\uff9e" +
    "\053\uff9e\077\uff9e\103\uff9e\001\002\000\014\041\102\042" +
    "\100\043\101\044\077\045\076\001\002\000\060\005\uffb7" +
    "\006\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\025\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\062\uffb7\066\uffb7\074\uffb7\076\uffb7\100" +
    "\uffb7\101\uffb7\104\uffb7\001\002\000\024\025\uffad\036\073" +
    "\037\074\062\uffad\066\uffad\074\uffad\100\uffad\101\uffad\104" +
    "\uffad\001\002\000\062\005\uff61\006\uff61\011\uff61\012\uff61" +
    "\013\uff61\014\uff61\024\063\025\uff61\030\uff61\031\uff61\032" +
    "\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61\040\uff61" +
    "\062\uff61\066\uff61\074\uff61\076\uff61\100\uff61\101\uff61\104" +
    "\uff61\001\002\000\044\004\uffa1\006\uffa1\015\uffa1\024\uffa1" +
    "\026\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\040\uffa1\042\uffa1\052\uffa1\053\uffa1\077\uffa1\103\uffa1" +
    "\001\002\000\060\005\uffb1\006\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\025\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\062\uffb1\066" +
    "\uffb1\074\uffb1\076\uffb1\100\uffb1\101\uffb1\104\uffb1\001\002" +
    "\000\060\005\uff62\006\uff62\011\uff62\012\uff62\013\uff62\014" +
    "\uff62\025\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62" +
    "\035\uff62\036\uff62\037\uff62\040\uff62\062\uff62\066\uff62\074" +
    "\uff62\076\uff62\100\uff62\101\uff62\104\uff62\001\002\000\046" +
    "\004\036\006\033\015\042\024\063\026\043\030\055\031" +
    "\046\032\054\033\067\034\057\035\062\040\051\042\047" +
    "\052\037\053\061\073\044\077\060\103\064\001\002\000" +
    "\046\004\uff9b\006\uff9b\015\uff9b\024\uff9b\026\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\040\uff9b\042" +
    "\uff9b\052\uff9b\053\uff9b\073\uff9b\077\uff9b\103\uff9b\001\002" +
    "\000\046\004\uff9a\006\uff9a\015\uff9a\024\uff9a\026\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\040\uff9a" +
    "\042\uff9a\052\uff9a\053\uff9a\073\uff9a\077\uff9a\103\uff9a\001" +
    "\002\000\020\025\uffa5\062\uffa5\066\uffa5\074\uffa5\100\uffa5" +
    "\101\uffa5\104\uffa5\001\002\000\004\004\107\001\002\000" +
    "\004\004\106\001\002\000\004\004\105\001\002\000\004" +
    "\004\104\001\002\000\004\004\103\001\002\000\062\005" +
    "\uff67\006\uff67\011\uff67\012\uff67\013\uff67\014\uff67\024\uff67" +
    "\025\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035" +
    "\uff67\036\uff67\037\uff67\040\uff67\062\uff67\066\uff67\074\uff67" +
    "\076\uff67\100\uff67\101\uff67\104\uff67\001\002\000\062\005" +
    "\uff66\006\uff66\011\uff66\012\uff66\013\uff66\014\uff66\024\uff66" +
    "\025\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\036\uff66\037\uff66\040\uff66\062\uff66\066\uff66\074\uff66" +
    "\076\uff66\100\uff66\101\uff66\104\uff66\001\002\000\062\005" +
    "\uff64\006\uff64\011\uff64\012\uff64\013\uff64\014\uff64\024\uff64" +
    "\025\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035" +
    "\uff64\036\uff64\037\uff64\040\uff64\062\uff64\066\uff64\074\uff64" +
    "\076\uff64\100\uff64\101\uff64\104\uff64\001\002\000\062\005" +
    "\uff63\006\uff63\011\uff63\012\uff63\013\uff63\014\uff63\024\uff63" +
    "\025\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035" +
    "\uff63\036\uff63\037\uff63\040\uff63\062\uff63\066\uff63\074\uff63" +
    "\076\uff63\100\uff63\101\uff63\104\uff63\001\002\000\062\005" +
    "\uff65\006\uff65\011\uff65\012\uff65\013\uff65\014\uff65\024\uff65" +
    "\025\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035" +
    "\uff65\036\uff65\037\uff65\040\uff65\062\uff65\066\uff65\074\uff65" +
    "\076\uff65\100\uff65\101\uff65\104\uff65\001\002\000\070\005" +
    "\uffb6\006\uffb6\007\135\010\137\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\025\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\062\uffb6\066\uffb6" +
    "\074\uffb6\075\140\076\uffb6\077\136\100\uffb6\101\uffb6\104" +
    "\uffb6\001\002\000\026\005\116\006\115\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\100\117\001" +
    "\002\000\004\100\113\001\002\000\024\025\uffa9\036\uffa9" +
    "\037\uffa9\062\uffa9\066\uffa9\074\uffa9\100\uffa9\101\uffa9\104" +
    "\uffa9\001\002\000\022\004\110\006\033\015\042\024\063" +
    "\026\043\042\047\077\121\103\064\001\002\000\022\004" +
    "\110\006\033\015\042\024\063\026\043\042\047\077\121" +
    "\103\064\001\002\000\022\004\110\006\033\015\042\024" +
    "\063\026\043\042\047\077\121\103\064\001\002\000\060" +
    "\005\uffaf\006\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\025" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\062\uffaf\066\uffaf\074\uffaf\076" +
    "\uffaf\100\uffaf\101\uffaf\104\uffaf\001\002\000\060\005\uffc1" +
    "\006\uffc1\011\126\012\125\013\123\014\124\025\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\062\uffc1\066\uffc1\074\uffc1\076\uffc1\100" +
    "\uffc1\101\uffc1\104\uffc1\001\002\000\022\004\110\006\033" +
    "\015\042\024\063\026\043\042\047\077\121\103\064\001" +
    "\002\000\010\005\116\006\115\100\117\001\002\000\022" +
    "\004\110\006\033\015\042\024\063\026\043\042\047\077" +
    "\121\103\064\001\002\000\022\004\110\006\033\015\042" +
    "\024\063\026\043\042\047\077\121\103\064\001\002\000" +
    "\022\004\110\006\033\015\042\024\063\026\043\042\047" +
    "\077\121\103\064\001\002\000\022\004\110\006\033\015" +
    "\042\024\063\026\043\042\047\077\121\103\064\001\002" +
    "\000\060\005\uffbe\006\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\025\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\062\uffbe\066\uffbe\074" +
    "\uffbe\076\uffbe\100\uffbe\101\uffbe\104\uffbe\001\002\000\060" +
    "\005\uffbd\006\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\025" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\062\uffbd\066\uffbd\074\uffbd\076" +
    "\uffbd\100\uffbd\101\uffbd\104\uffbd\001\002\000\060\005\uffbc" +
    "\006\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\025\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\062\uffbc\066\uffbc\074\uffbc\076\uffbc\100" +
    "\uffbc\101\uffbc\104\uffbc\001\002\000\060\005\uffbb\006\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\025\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\062\uffbb\066\uffbb\074\uffbb\076\uffbb\100\uffbb\101" +
    "\uffbb\104\uffbb\001\002\000\060\005\uffc0\006\uffc0\011\126" +
    "\012\125\013\123\014\124\025\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\062\uffc0\066\uffc0\074\uffc0\076\uffc0\100\uffc0\101\uffc0\104" +
    "\uffc0\001\002\000\030\005\116\006\115\025\uffaa\036\uffaa" +
    "\037\uffaa\062\uffaa\066\uffaa\074\uffaa\100\uffaa\101\uffaa\104" +
    "\uffaa\001\002\000\060\005\uffb5\006\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\025\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\062\uffb5" +
    "\066\uffb5\074\uffb5\076\uffb5\100\uffb5\101\uffb5\104\uffb5\001" +
    "\002\000\050\004\036\006\033\015\042\024\063\026\043" +
    "\030\055\031\046\032\054\033\067\034\057\035\062\040" +
    "\051\042\047\052\037\053\061\073\044\077\060\100\145" +
    "\103\064\001\002\000\060\005\uffb4\006\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\025\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\062" +
    "\uffb4\066\uffb4\074\uffb4\076\uffb4\100\uffb4\101\uffb4\104\uffb4" +
    "\001\002\000\004\015\141\001\002\000\004\076\142\001" +
    "\002\000\060\005\uff68\006\uff68\011\uff68\012\uff68\013\uff68" +
    "\014\uff68\025\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034" +
    "\uff68\035\uff68\036\uff68\037\uff68\040\uff68\062\uff68\066\uff68" +
    "\074\uff68\076\uff68\100\uff68\101\uff68\104\uff68\001\002\000" +
    "\006\025\147\100\uff83\001\002\000\004\100\146\001\002" +
    "\000\060\005\uff81\006\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\025\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\037\uff81\040\uff81\062\uff81\066\uff81\074" +
    "\uff81\076\uff81\100\uff81\101\uff81\104\uff81\001\002\000\060" +
    "\005\uff82\006\uff82\011\uff82\012\uff82\013\uff82\014\uff82\025" +
    "\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82" +
    "\036\uff82\037\uff82\040\uff82\062\uff82\066\uff82\074\uff82\076" +
    "\uff82\100\uff82\101\uff82\104\uff82\001\002\000\046\004\036" +
    "\006\033\015\042\024\063\026\043\030\055\031\046\032" +
    "\054\033\067\034\057\035\062\040\051\042\047\052\037" +
    "\053\061\073\044\077\060\103\064\001\002\000\004\100" +
    "\uff84\001\002\000\024\005\116\006\115\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\001\002\000" +
    "\024\025\uffa8\036\uffa8\037\uffa8\062\uffa8\066\uffa8\074\uffa8" +
    "\100\uffa8\101\uffa8\104\uffa8\001\002\000\004\074\155\001" +
    "\002\000\006\036\073\037\074\001\002\000\020\025\uffa3" +
    "\062\uffa3\066\uffa3\074\uffa3\100\uffa3\101\uffa3\104\uffa3\001" +
    "\002\000\046\004\036\006\033\015\042\024\063\026\043" +
    "\030\055\031\046\032\054\033\067\034\057\035\062\040" +
    "\051\042\047\052\037\053\061\073\044\077\060\103\064" +
    "\001\002\000\020\025\uffa4\062\uffa4\066\uffa4\074\uffa4\100" +
    "\uffa4\101\uffa4\104\uffa4\001\002\000\112\002\uff99\003\uff99" +
    "\004\uff99\006\uff99\015\uff99\017\uff99\023\uff99\024\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\040\uff99\041\uff99\042\uff99\043\uff99\047\uff99\050" +
    "\uff99\052\uff99\053\uff99\055\uff99\056\uff99\060\uff99\062\uff99" +
    "\063\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\077" +
    "\uff99\103\uff99\001\002\000\060\005\uffb9\006\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\025\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\062\uffb9\066\uffb9\074\uffb9\076\uffb9\100\uffb9\101\uffb9\104" +
    "\uffb9\001\002\000\022\004\110\006\033\015\042\024\063" +
    "\026\043\042\047\077\121\103\064\001\002\000\010\005" +
    "\116\006\115\100\164\001\002\000\060\005\uffb0\006\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\025\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\062\uffb0\066\uffb0\074\uffb0\076\uffb0\100\uffb0\101" +
    "\uffb0\104\uffb0\001\002\000\004\104\166\001\002\000\112" +
    "\002\uff98\003\uff98\004\uff98\006\uff98\015\uff98\017\uff98\023" +
    "\uff98\024\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\047\uff98\050\uff98\052\uff98\053\uff98\055\uff98\056\uff98" +
    "\060\uff98\062\uff98\063\uff98\067\uff98\070\uff98\071\uff98\072" +
    "\uff98\073\uff98\077\uff98\103\uff98\001\002\000\004\004\200" +
    "\001\002\000\004\004\177\001\002\000\004\004\176\001" +
    "\002\000\004\004\175\001\002\000\004\004\174\001\002" +
    "\000\010\004\uff97\027\uff97\104\uff97\001\002\000\010\004" +
    "\uff95\027\uff95\104\uff95\001\002\000\010\004\uff96\027\uff96" +
    "\104\uff96\001\002\000\010\004\uff94\027\uff94\104\uff94\001" +
    "\002\000\010\004\uff93\027\uff93\104\uff93\001\002\000\014" +
    "\041\222\042\220\043\221\044\217\045\216\001\002\000" +
    "\004\046\211\001\002\000\004\046\204\001\002\000\004" +
    "\004\205\001\002\000\004\075\206\001\002\000\004\015" +
    "\207\001\002\000\004\076\210\001\002\000\010\004\uff70" +
    "\027\uff70\104\uff70\001\002\000\004\004\212\001\002\000" +
    "\004\075\213\001\002\000\004\015\214\001\002\000\004" +
    "\076\215\001\002\000\010\004\uff6f\027\uff6f\104\uff6f\001" +
    "\002\000\004\004\227\001\002\000\004\004\226\001\002" +
    "\000\004\004\225\001\002\000\004\004\224\001\002\000" +
    "\004\004\223\001\002\000\010\004\uff92\027\uff92\104\uff92" +
    "\001\002\000\010\004\uff91\027\uff91\104\uff91\001\002\000" +
    "\010\004\uff90\027\uff90\104\uff90\001\002\000\010\004\uff8e" +
    "\027\uff8e\104\uff8e\001\002\000\010\004\uff8f\027\uff8f\104" +
    "\uff8f\001\002\000\004\002\ufff2\001\002\000\014\002\ufff3" +
    "\003\020\023\011\047\021\050\022\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\ufff8\001\002\000\004\002\ufff1" +
    "\001\002\000\102\003\260\004\274\006\033\015\042\023" +
    "\011\024\063\026\043\027\026\030\055\031\046\032\054" +
    "\033\067\034\057\035\062\040\051\041\243\042\047\043" +
    "\237\047\021\050\022\052\037\053\061\055\246\056\253" +
    "\060\254\067\264\070\255\071\241\072\240\073\044\077" +
    "\270\103\064\001\002\000\104\004\uffcd\006\uffcd\015\uffcd" +
    "\017\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\047\uffcd\050\uffcd\052\uffcd\053\uffcd\055" +
    "\uffcd\056\uffcd\060\uffcd\062\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\077\uffcd\103\uffcd\001\002\000\004\046" +
    "\u0144\001\002\000\004\077\u013d\001\002\000\004\077\u0139" +
    "\001\002\000\104\004\uffd5\006\uffd5\015\uffd5\017\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5" +
    "\060\uffd5\062\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\077\uffd5\103\uffd5\001\002\000\004\046\u0134\001\002" +
    "\000\104\004\uffd0\006\uffd0\015\uffd0\017\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\047" +
    "\uffd0\050\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\060\uffd0" +
    "\062\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\077" +
    "\uffd0\103\uffd0\001\002\000\104\004\uffcc\006\uffcc\015\uffcc" +
    "\017\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\055" +
    "\uffcc\056\uffcc\060\uffcc\062\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\077\uffcc\103\uffcc\001\002\000\004\050" +
    "\022\001\002\000\104\004\uffd7\006\uffd7\015\uffd7\017\uffd7" +
    "\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7\055\uffd7\056" +
    "\uffd7\060\uffd7\062\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\077\uffd7\103\uffd7\001\002\000\010\004\276\027" +
    "\275\104\u0122\001\002\000\004\104\u0121\001\002\000\100" +
    "\004\274\006\033\015\042\023\011\024\063\026\043\027" +
    "\026\030\055\031\046\032\054\033\067\034\057\035\062" +
    "\040\051\041\243\042\047\043\237\047\021\050\022\052" +
    "\037\053\061\055\246\056\253\060\254\067\343\070\u011d" +
    "\071\241\072\240\073\044\077\270\103\064\001\002\000" +
    "\006\057\uff7c\077\u010c\001\002\000\102\003\260\004\274" +
    "\006\033\015\042\023\011\024\063\026\043\027\026\030" +
    "\055\031\046\032\054\033\067\034\057\035\062\040\051" +
    "\041\243\042\047\043\237\047\021\050\022\052\037\053" +
    "\061\055\246\056\253\060\254\067\264\070\322\071\241" +
    "\072\240\073\044\077\270\103\064\001\002\000\050\004" +
    "\036\006\033\015\042\024\063\026\043\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\042\047\052" +
    "\037\053\061\073\044\077\060\103\064\104\374\001\002" +
    "\000\104\004\uffcb\006\uffcb\015\uffcb\017\uffcb\023\uffcb\024" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\047" +
    "\uffcb\050\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\060\uffcb" +
    "\062\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\077" +
    "\uffcb\103\uffcb\001\002\000\104\004\uffd1\006\uffd1\015\uffd1" +
    "\017\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\056\uffd1\060\uffd1\062\uffd1\067\uffd1\070\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\077\uffd1\103\uffd1\001\002\000\104\004" +
    "\uffc5\006\uffc5\015\uffc5\017\uffc5\023\uffc5\024\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\053\uffc5\055\uffc5\056\uffc5\060\uffc5\062\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\077\uffc5\103\uffc5" +
    "\001\002\000\104\004\uffd2\006\uffd2\015\uffd2\017\uffd2\023" +
    "\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\060\uffd2\062\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\077\uffd2\103\uffd2\001\002\000\010\004\027\027\026" +
    "\104\373\001\002\000\004\104\372\001\002\000\004\104" +
    "\371\001\002\000\104\004\uffc6\006\uffc6\015\uffc6\017\uffc6" +
    "\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\060\uffc6\062\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\077\uffc6\103\uffc6\001\002\000\104\004\uffd6\006" +
    "\uffd6\015\uffd6\017\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\047\uffd6\050\uffd6\052\uffd6" +
    "\053\uffd6\055\uffd6\056\uffd6\060\uffd6\062\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\077\uffd6\103\uffd6\001\002" +
    "\000\104\004\uffd8\006\uffd8\015\uffd8\017\uffd8\023\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\047" +
    "\uffd8\050\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\060\uffd8" +
    "\062\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\077" +
    "\uffd8\103\uffd8\001\002\000\046\004\110\006\033\015\042" +
    "\024\063\026\043\030\055\031\046\032\054\033\067\034" +
    "\057\035\062\040\051\042\047\052\037\053\061\054\316" +
    "\077\060\103\064\001\002\000\010\004\027\027\026\104" +
    "\315\001\002\000\010\004\276\027\275\104\300\001\002" +
    "\000\104\004\uffce\006\uffce\015\uffce\017\uffce\023\uffce\024" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\040\uffce\041\uffce\042\uffce\043\uffce\047" +
    "\uffce\050\uffce\052\uffce\053\uffce\055\uffce\056\uffce\060\uffce" +
    "\062\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\077" +
    "\uffce\103\uffce\001\002\000\056\005\uffb6\006\uffb6\007\135" +
    "\010\137\011\uffb6\012\uffb6\013\uffb6\014\uffb6\027\032\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\073" +
    "\037\074\040\uffb6\062\uffb6\075\140\077\136\104\uffb6\001" +
    "\002\000\004\075\311\001\002\000\004\027\301\001\002" +
    "\000\110\002\uff69\003\uff69\004\uff69\006\uff69\015\uff69\017" +
    "\uff69\023\uff69\024\uff69\026\uff69\027\uff69\030\uff69\031\uff69" +
    "\032\uff69\033\uff69\034\uff69\035\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\047\uff69\050\uff69\052\uff69\053\uff69\055\uff69" +
    "\056\uff69\060\uff69\062\uff69\067\uff69\070\uff69\071\uff69\072" +
    "\uff69\073\uff69\077\uff69\103\uff69\001\002\000\104\004\uffd4" +
    "\006\uffd4\015\uffd4\017\uffd4\023\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\047\uffd4\050\uffd4\052" +
    "\uffd4\053\uffd4\055\uffd4\056\uffd4\060\uffd4\062\uffd4\067\uffd4" +
    "\070\uffd4\071\uffd4\072\uffd4\073\uffd4\077\uffd4\103\uffd4\001" +
    "\002\000\004\075\302\001\002\000\022\004\110\006\033" +
    "\015\042\024\063\026\043\042\047\077\121\103\064\001" +
    "\002\000\012\005\116\006\115\025\307\076\uff6b\001\002" +
    "\000\004\076\305\001\002\000\004\104\306\001\002\000" +
    "\110\002\uff6e\003\uff6e\004\uff6e\006\uff6e\015\uff6e\017\uff6e" +
    "\023\uff6e\024\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\040\uff6e\041\uff6e\042\uff6e" +
    "\043\uff6e\047\uff6e\050\uff6e\052\uff6e\053\uff6e\055\uff6e\056" +
    "\uff6e\060\uff6e\062\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e" +
    "\073\uff6e\077\uff6e\103\uff6e\001\002\000\022\004\110\006" +
    "\033\015\042\024\063\026\043\042\047\077\121\103\064" +
    "\001\002\000\004\076\uff6c\001\002\000\022\004\110\006" +
    "\033\015\042\024\063\026\043\042\047\077\121\103\064" +
    "\001\002\000\004\076\313\001\002\000\004\104\314\001" +
    "\002\000\110\002\uff6d\003\uff6d\004\uff6d\006\uff6d\015\uff6d" +
    "\017\uff6d\023\uff6d\024\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\040\uff6d\041\uff6d" +
    "\042\uff6d\043\uff6d\047\uff6d\050\uff6d\052\uff6d\053\uff6d\055" +
    "\uff6d\056\uff6d\060\uff6d\062\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\077\uff6d\103\uff6d\001\002\000\104\004" +
    "\uffd3\006\uffd3\015\uffd3\017\uffd3\023\uffd3\024\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\047\uffd3\050\uffd3" +
    "\052\uffd3\053\uffd3\055\uffd3\056\uffd3\060\uffd3\062\uffd3\067" +
    "\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\077\uffd3\103\uffd3" +
    "\001\002\000\004\101\317\001\002\000\004\016\320\001" +
    "\002\000\102\003\260\004\274\006\033\015\042\023\011" +
    "\024\063\026\043\027\026\030\055\031\046\032\054\033" +
    "\067\034\057\035\062\040\051\041\243\042\047\043\237" +
    "\047\021\050\022\052\037\053\061\055\246\056\253\060" +
    "\254\067\264\070\322\071\241\072\240\073\044\077\270" +
    "\103\064\001\002\000\102\004\274\006\033\015\042\017" +
    "\327\023\011\024\063\026\043\027\026\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\041\243\042" +
    "\047\043\237\047\021\050\022\052\037\053\061\055\246" +
    "\056\253\060\254\067\343\070\337\071\241\072\240\073" +
    "\044\077\270\103\064\001\002\000\050\004\036\006\033" +
    "\015\042\024\063\026\043\030\055\031\046\032\054\033" +
    "\067\034\057\035\062\040\051\042\047\052\037\053\061" +
    "\073\044\077\060\103\064\104\323\001\002\000\104\004" +
    "\uffc7\006\uffc7\015\uffc7\017\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\050\uffc7" +
    "\052\uffc7\053\uffc7\055\uffc7\056\uffc7\060\uffc7\062\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\077\uffc7\103\uffc7" +
    "\001\002\000\004\104\325\001\002\000\104\004\uffc8\006" +
    "\uffc8\015\uffc8\017\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\047\uffc8\050\uffc8\052\uffc8" +
    "\053\uffc8\055\uffc8\056\uffc8\060\uffc8\062\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\077\uffc8\103\uffc8\001\002" +
    "\000\104\004\uffe5\006\uffe5\015\uffe5\017\uffe5\023\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\047" +
    "\uffe5\050\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\060\uffe5" +
    "\062\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\077" +
    "\uffe5\103\uffe5\001\002\000\004\100\370\001\002\000\104" +
    "\004\uffee\006\uffee\015\uffee\017\uffee\023\uffee\024\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\040\uffee\041\uffee\042\uffee\043\uffee\047\uffee\050" +
    "\uffee\052\uffee\053\uffee\055\uffee\056\uffee\060\uffee\062\uffee" +
    "\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\077\uffee\103" +
    "\uffee\001\002\000\104\004\uffe1\006\uffe1\015\uffe1\017\uffe1" +
    "\023\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\047\uffe1\050\uffe1\052\uffe1\053\uffe1\055\uffe1\056" +
    "\uffe1\060\uffe1\062\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\077\uffe1\103\uffe1\001\002\000\104\004\uffe3\006" +
    "\uffe3\015\uffe3\017\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\047\uffe3\050\uffe3\052\uffe3" +
    "\053\uffe3\055\uffe3\056\uffe3\060\uffe3\062\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\077\uffe3\103\uffe3\001\002" +
    "\000\104\004\uffe9\006\uffe9\015\uffe9\017\uffe9\023\uffe9\024" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\047" +
    "\uffe9\050\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\060\uffe9" +
    "\062\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\077" +
    "\uffe9\103\uffe9\001\002\000\010\004\276\027\275\104\367" +
    "\001\002\000\004\104\365\001\002\000\104\004\uffe4\006" +
    "\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\047\uffe4\050\uffe4\052\uffe4" +
    "\053\uffe4\055\uffe4\056\uffe4\060\uffe4\062\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\073\uffe4\077\uffe4\103\uffe4\001\002" +
    "\000\050\004\036\006\033\015\042\024\063\026\043\030" +
    "\055\031\046\032\054\033\067\034\057\035\062\040\051" +
    "\042\047\052\037\053\061\073\044\077\060\103\064\104" +
    "\362\001\002\000\104\004\uffea\006\uffea\015\uffea\017\uffea" +
    "\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\047\uffea\050\uffea\052\uffea\053\uffea\055\uffea\056" +
    "\uffea\060\uffea\062\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\073\uffea\077\uffea\103\uffea\001\002\000\104\004\uffeb\006" +
    "\uffeb\015\uffeb\017\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\047\uffeb\050\uffeb\052\uffeb" +
    "\053\uffeb\055\uffeb\056\uffeb\060\uffeb\062\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\077\uffeb\103\uffeb\001\002" +
    "\000\010\004\027\027\026\104\361\001\002\000\004\104" +
    "\357\001\002\000\004\104\356\001\002\000\004\104\355" +
    "\001\002\000\104\004\uffe8\006\uffe8\015\uffe8\017\uffe8\023" +
    "\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\047\uffe8\050\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\062\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\077\uffe8\103\uffe8\001\002\000\104\004\uffe0\006\uffe0" +
    "\015\uffe0\017\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\047\uffe0\050\uffe0\052\uffe0\053" +
    "\uffe0\055\uffe0\056\uffe0\060\uffe0\062\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\077\uffe0\103\uffe0\001\002\000" +
    "\010\004\027\027\026\104\354\001\002\000\010\004\276" +
    "\027\275\104\353\001\002\000\104\004\uffe6\006\uffe6\015" +
    "\uffe6\017\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\047\uffe6\050\uffe6\052\uffe6\053\uffe6" +
    "\055\uffe6\056\uffe6\060\uffe6\062\uffe6\067\uffe6\070\uffe6\071" +
    "\uffe6\072\uffe6\073\uffe6\077\uffe6\103\uffe6\001\002\000\104" +
    "\004\uffed\006\uffed\015\uffed\017\uffed\023\uffed\024\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed\047\uffed\050" +
    "\uffed\052\uffed\053\uffed\055\uffed\056\uffed\060\uffed\062\uffed" +
    "\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\077\uffed\103" +
    "\uffed\001\002\000\104\004\uffec\006\uffec\015\uffec\017\uffec" +
    "\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\047\uffec\050\uffec\052\uffec\053\uffec\055\uffec\056" +
    "\uffec\060\uffec\062\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\077\uffec\103\uffec\001\002\000\104\004\uffdf\006" +
    "\uffdf\015\uffdf\017\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\047\uffdf\050\uffdf\052\uffdf" +
    "\053\uffdf\055\uffdf\056\uffdf\060\uffdf\062\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\077\uffdf\103\uffdf\001\002" +
    "\000\104\004\uffef\006\uffef\015\uffef\017\uffef\023\uffef\024" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\040\uffef\041\uffef\042\uffef\043\uffef\047" +
    "\uffef\050\uffef\052\uffef\053\uffef\055\uffef\056\uffef\060\uffef" +
    "\062\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\077" +
    "\uffef\103\uffef\001\002\000\104\004\uffdd\006\uffdd\015\uffdd" +
    "\017\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\055" +
    "\uffdd\056\uffdd\060\uffdd\062\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\077\uffdd\103\uffdd\001\002\000\106\004" +
    "\uff8d\006\uff8d\015\uff8d\017\uff8d\023\uff8d\024\uff8d\026\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\047\uff8d\050\uff8d" +
    "\052\uff8d\053\uff8d\055\uff8d\056\uff8d\060\uff8d\062\uff8d\063" +
    "\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\077\uff8d" +
    "\103\uff8d\001\002\000\104\004\uffe7\006\uffe7\015\uffe7\017" +
    "\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\047\uffe7\050\uffe7\052\uffe7\053\uffe7\055\uffe7" +
    "\056\uffe7\060\uffe7\062\uffe7\067\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\077\uffe7\103\uffe7\001\002\000\104\004\uffdb" +
    "\006\uffdb\015\uffdb\017\uffdb\023\uffdb\024\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\047\uffdb\050\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\056\uffdb\060\uffdb\062\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\077\uffdb\103\uffdb\001" +
    "\002\000\004\104\364\001\002\000\104\004\uffdc\006\uffdc" +
    "\015\uffdc\017\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc\052\uffdc\053" +
    "\uffdc\055\uffdc\056\uffdc\060\uffdc\062\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\077\uffdc\103\uffdc\001\002\000" +
    "\104\004\uffde\006\uffde\015\uffde\017\uffde\023\uffde\024\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde\047\uffde" +
    "\050\uffde\052\uffde\053\uffde\055\uffde\056\uffde\060\uffde\062" +
    "\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\077\uffde" +
    "\103\uffde\001\002\000\104\004\uff6a\006\uff6a\015\uff6a\017" +
    "\uff6a\023\uff6a\024\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a" +
    "\032\uff6a\033\uff6a\034\uff6a\035\uff6a\040\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\047\uff6a\050\uff6a\052\uff6a\053\uff6a\055\uff6a" +
    "\056\uff6a\060\uff6a\062\uff6a\067\uff6a\070\uff6a\071\uff6a\072" +
    "\uff6a\073\uff6a\077\uff6a\103\uff6a\001\002\000\104\004\uffe2" +
    "\006\uffe2\015\uffe2\017\uffe2\023\uffe2\024\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\047\uffe2\050\uffe2\052" +
    "\uffe2\053\uffe2\055\uffe2\056\uffe2\060\uffe2\062\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\077\uffe2\103\uffe2\001" +
    "\002\000\106\004\uff77\006\uff77\015\uff77\017\uff77\023\uff77" +
    "\024\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\047\uff77\050\uff77\052\uff77\053\uff77\055\uff77\056\uff77\057" +
    "\uff77\060\uff77\062\uff77\067\uff77\070\uff77\071\uff77\072\uff77" +
    "\073\uff77\077\uff77\103\uff77\001\002\000\104\004\uffc9\006" +
    "\uffc9\015\uffc9\017\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\047\uffc9\050\uffc9\052\uffc9" +
    "\053\uffc9\055\uffc9\056\uffc9\060\uffc9\062\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\077\uffc9\103\uffc9\001\002" +
    "\000\104\004\uffda\006\uffda\015\uffda\017\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\040\uffda\041\uffda\042\uffda\043\uffda\047" +
    "\uffda\050\uffda\052\uffda\053\uffda\055\uffda\056\uffda\060\uffda" +
    "\062\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\077" +
    "\uffda\103\uffda\001\002\000\104\004\uffcf\006\uffcf\015\uffcf" +
    "\017\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\055" +
    "\uffcf\056\uffcf\060\uffcf\062\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\077\uffcf\103\uffcf\001\002\000\102\004" +
    "\uffc7\006\uffc7\015\uffc7\017\375\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\050\uffc7" +
    "\052\uffc7\053\uffc7\055\uffc7\056\uffc7\060\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\077\uffc7\103\uffc7\001\002" +
    "\000\110\002\uff7f\003\uff7f\004\uff7f\006\uff7f\015\uff7f\017" +
    "\uff7f\023\uff7f\024\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\040\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\047\uff7f\050\uff7f\052\uff7f\053\uff7f\055\uff7f" +
    "\056\uff7f\060\uff7f\062\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\077\uff7f\103\uff7f\001\002\000\102\004\274" +
    "\006\033\015\042\023\011\024\063\026\043\027\026\030" +
    "\055\031\046\032\054\033\067\034\057\035\062\040\051" +
    "\041\243\042\047\043\237\047\021\050\022\052\037\053" +
    "\061\055\246\056\253\060\254\062\u0105\067\343\070\337" +
    "\071\241\072\240\073\044\077\270\103\064\001\002\000" +
    "\006\062\u0100\104\372\001\002\000\046\004\036\006\033" +
    "\015\042\024\063\026\043\030\055\031\046\032\054\033" +
    "\067\034\057\035\062\040\051\042\047\052\037\053\061" +
    "\073\044\077\060\103\064\001\002\000\004\104\u0102\001" +
    "\002\000\004\061\u0103\001\002\000\004\104\u0104\001\002" +
    "\000\104\004\uff76\006\uff76\015\uff76\017\uff76\023\uff76\024" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\040\uff76\041\uff76\042\uff76\043\uff76\047" +
    "\uff76\050\uff76\052\uff76\053\uff76\055\uff76\056\uff76\060\uff76" +
    "\062\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\077" +
    "\uff76\103\uff76\001\002\000\046\004\036\006\033\015\042" +
    "\024\063\026\043\030\055\031\046\032\054\033\067\034" +
    "\057\035\062\040\051\042\047\052\037\053\061\073\044" +
    "\077\060\103\064\001\002\000\004\104\u0107\001\002\000" +
    "\004\061\u0108\001\002\000\004\104\u0109\001\002\000\104" +
    "\004\uff75\006\uff75\015\uff75\017\uff75\023\uff75\024\uff75\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\040\uff75\041\uff75\042\uff75\043\uff75\047\uff75\050" +
    "\uff75\052\uff75\053\uff75\055\uff75\056\uff75\060\uff75\062\uff75" +
    "\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\077\uff75\103" +
    "\uff75\001\002\000\006\057\uff7b\077\u0116\001\002\000\004" +
    "\057\u0113\001\002\000\046\004\036\006\033\015\042\024" +
    "\063\026\043\030\055\031\046\032\054\033\067\034\057" +
    "\035\062\040\051\042\047\052\037\053\061\073\044\077" +
    "\060\103\064\001\002\000\004\101\u010e\001\002\000\004" +
    "\016\u010f\001\002\000\102\003\260\004\274\006\033\015" +
    "\042\023\011\024\063\026\043\027\026\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\041\243\042" +
    "\047\043\237\047\021\050\022\052\037\053\061\055\246" +
    "\056\253\060\254\067\264\070\322\071\241\072\240\073" +
    "\044\077\270\103\064\001\002\000\102\004\274\006\033" +
    "\015\042\017\u0111\023\011\024\063\026\043\027\026\030" +
    "\055\031\046\032\054\033\067\034\057\035\062\040\051" +
    "\041\243\042\047\043\237\047\021\050\022\052\037\053" +
    "\061\055\246\056\253\060\254\067\343\070\337\071\241" +
    "\072\240\073\044\077\270\103\064\001\002\000\004\100" +
    "\u0112\001\002\000\006\057\uff79\077\uff79\001\002\000\004" +
    "\104\u0114\001\002\000\104\004\uff7d\006\uff7d\015\uff7d\017" +
    "\uff7d\023\uff7d\024\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\033\uff7d\034\uff7d\035\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\047\uff7d\050\uff7d\052\uff7d\053\uff7d\055\uff7d" +
    "\056\uff7d\060\uff7d\062\uff7d\067\uff7d\070\uff7d\071\uff7d\072" +
    "\uff7d\073\uff7d\077\uff7d\103\uff7d\001\002\000\004\057\uff7a" +
    "\001\002\000\050\004\036\006\033\015\042\024\063\026" +
    "\043\030\055\031\046\032\054\033\067\034\057\035\062" +
    "\040\051\042\047\052\037\053\061\054\316\073\044\077" +
    "\060\103\064\001\002\000\004\101\u0118\001\002\000\004" +
    "\016\u0119\001\002\000\102\003\260\004\274\006\033\015" +
    "\042\023\011\024\063\026\043\027\026\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\041\243\042" +
    "\047\043\237\047\021\050\022\052\037\053\061\055\246" +
    "\056\253\060\254\067\264\070\322\071\241\072\240\073" +
    "\044\077\270\103\064\001\002\000\102\004\274\006\033" +
    "\015\042\017\u011b\023\011\024\063\026\043\027\026\030" +
    "\055\031\046\032\054\033\067\034\057\035\062\040\051" +
    "\041\243\042\047\043\237\047\021\050\022\052\037\053" +
    "\061\055\246\056\253\060\254\067\343\070\337\071\241" +
    "\072\240\073\044\077\270\103\064\001\002\000\004\100" +
    "\u011c\001\002\000\006\057\uff78\077\uff78\001\002\000\050" +
    "\004\036\006\033\015\042\024\063\026\043\030\055\031" +
    "\046\032\054\033\067\034\057\035\062\040\051\042\047" +
    "\052\037\053\061\073\044\077\060\103\064\104\362\001" +
    "\002\000\004\104\u011f\001\002\000\102\004\uffdc\006\uffdc" +
    "\015\uffdc\017\u0120\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc\052\uffdc\053" +
    "\uffdc\055\uffdc\056\uffdc\060\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\077\uffdc\103\uffdc\001\002\000\110\002" +
    "\uff7e\003\uff7e\004\uff7e\006\uff7e\015\uff7e\017\uff7e\023\uff7e" +
    "\024\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\047\uff7e\050\uff7e\052\uff7e\053\uff7e\055\uff7e\056\uff7e\060" +
    "\uff7e\062\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e" +
    "\077\uff7e\103\uff7e\001\002\000\104\004\uffca\006\uffca\015" +
    "\uffca\017\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\047\uffca\050\uffca\052\uffca\053\uffca" +
    "\055\uffca\056\uffca\060\uffca\062\uffca\067\uffca\070\uffca\071" +
    "\uffca\072\uffca\073\uffca\077\uffca\103\uffca\001\002\000\104" +
    "\004\uffd9\006\uffd9\015\uffd9\017\uffd9\023\uffd9\024\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\047\uffd9\050" +
    "\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\060\uffd9\062\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\077\uffd9\103" +
    "\uffd9\001\002\000\006\004\027\027\026\001\002\000\004" +
    "\063\u0125\001\002\000\004\041\u0126\001\002\000\004\077" +
    "\u0127\001\002\000\006\064\u0128\065\u0129\001\002\000\046" +
    "\004\036\006\033\015\042\024\063\026\043\030\055\031" +
    "\046\032\054\033\067\034\057\035\062\040\051\042\047" +
    "\052\037\053\061\073\044\077\060\103\064\001\002\000" +
    "\046\004\036\006\033\015\042\024\063\026\043\030\055" +
    "\031\046\032\054\033\067\034\057\035\062\040\051\042" +
    "\047\052\037\053\061\073\044\077\060\103\064\001\002" +
    "\000\004\066\u012b\001\002\000\004\016\u012c\001\002\000" +
    "\102\003\260\004\274\006\033\015\042\023\011\024\063" +
    "\026\043\027\026\030\055\031\046\032\054\033\067\034" +
    "\057\035\062\040\051\041\243\042\047\043\237\047\021" +
    "\050\022\052\037\053\061\055\246\056\253\060\254\067" +
    "\264\070\322\071\241\072\240\073\044\077\270\103\064" +
    "\001\002\000\102\004\274\006\033\015\042\017\u012e\023" +
    "\011\024\063\026\043\027\026\030\055\031\046\032\054" +
    "\033\067\034\057\035\062\040\051\041\243\042\047\043" +
    "\237\047\021\050\022\052\037\053\061\055\246\056\253" +
    "\060\254\067\343\070\337\071\241\072\240\073\044\077" +
    "\270\103\064\001\002\000\104\004\uff73\006\uff73\015\uff73" +
    "\017\uff73\023\uff73\024\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\034\uff73\035\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\047\uff73\050\uff73\052\uff73\053\uff73\055" +
    "\uff73\056\uff73\060\uff73\062\uff73\067\uff73\070\uff73\071\uff73" +
    "\072\uff73\073\uff73\077\uff73\103\uff73\001\002\000\004\066" +
    "\u0130\001\002\000\004\016\u0131\001\002\000\102\003\260" +
    "\004\274\006\033\015\042\023\011\024\063\026\043\027" +
    "\026\030\055\031\046\032\054\033\067\034\057\035\062" +
    "\040\051\041\243\042\047\043\237\047\021\050\022\052" +
    "\037\053\061\055\246\056\253\060\254\067\264\070\322" +
    "\071\241\072\240\073\044\077\270\103\064\001\002\000" +
    "\102\004\274\006\033\015\042\017\u0133\023\011\024\063" +
    "\026\043\027\026\030\055\031\046\032\054\033\067\034" +
    "\057\035\062\040\051\041\243\042\047\043\237\047\021" +
    "\050\022\052\037\053\061\055\246\056\253\060\254\067" +
    "\343\070\337\071\241\072\240\073\044\077\270\103\064" +
    "\001\002\000\104\004\uff74\006\uff74\015\uff74\017\uff74\023" +
    "\uff74\024\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74" +
    "\033\uff74\034\uff74\035\uff74\040\uff74\041\uff74\042\uff74\043" +
    "\uff74\047\uff74\050\uff74\052\uff74\053\uff74\055\uff74\056\uff74" +
    "\060\uff74\062\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073" +
    "\uff74\077\uff74\103\uff74\001\002\000\004\004\u0135\001\002" +
    "\000\004\075\u0136\001\002\000\004\015\u0137\001\002\000" +
    "\004\076\u0138\001\002\000\010\004\uff72\027\uff72\104\uff72" +
    "\001\002\000\004\004\u013a\001\002\000\004\100\u013b\001" +
    "\002\000\004\104\u013c\001\002\000\106\004\uffae\006\uffae" +
    "\015\uffae\017\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\047\uffae\050\uffae\052\uffae\053" +
    "\uffae\055\uffae\056\uffae\060\uffae\062\uffae\067\uffae\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\077\uffae\103\uffae\104\uffae\001" +
    "\002\000\010\004\u013f\026\u0140\103\u013e\001\002\000\004" +
    "\100\u0143\001\002\000\004\100\u0142\001\002\000\004\100" +
    "\u0141\001\002\000\004\104\uff5e\001\002\000\004\104\uff60" +
    "\001\002\000\004\104\uff5f\001\002\000\004\004\u0145\001" +
    "\002\000\004\075\u0146\001\002\000\004\015\u0147\001\002" +
    "\000\004\076\u0148\001\002\000\010\004\uff71\027\uff71\104" +
    "\uff71\001\002\000\102\003\260\004\274\006\033\015\042" +
    "\023\011\024\063\026\043\027\026\030\055\031\046\032" +
    "\054\033\067\034\057\035\062\040\051\041\243\042\047" +
    "\043\237\047\021\050\022\052\037\053\061\055\246\056" +
    "\253\060\254\067\264\070\322\071\241\072\240\073\044" +
    "\077\270\103\064\001\002\000\100\004\274\006\033\015" +
    "\042\023\011\024\063\026\043\027\026\030\055\031\046" +
    "\032\054\033\067\034\057\035\062\040\051\041\243\042" +
    "\047\043\237\047\021\050\022\052\037\053\061\055\246" +
    "\056\253\060\254\067\343\070\u014b\071\241\072\240\073" +
    "\044\077\270\103\064\001\002\000\050\004\036\006\033" +
    "\015\042\024\063\026\043\030\055\031\046\032\054\033" +
    "\067\034\057\035\062\040\051\042\047\052\037\053\061" +
    "\073\044\077\060\103\064\104\u014c\001\002\000\102\004" +
    "\uffdb\006\uffdb\015\uffdb\017\u0150\023\uffdb\024\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\047\uffdb\050\uffdb" +
    "\052\uffdb\053\uffdb\055\uffdb\056\uffdb\060\uffdb\067\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\077\uffdb\103\uffdb\001\002" +
    "\000\004\104\u014e\001\002\000\102\004\uffdc\006\uffdc\015" +
    "\uffdc\017\u014f\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\060\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\077\uffdc\103\uffdc\001\002\000\110\002\uff85" +
    "\003\uff85\004\uff85\006\uff85\015\uff85\017\uff85\023\uff85\024" +
    "\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85" +
    "\034\uff85\035\uff85\040\uff85\041\uff85\042\uff85\043\uff85\047" +
    "\uff85\050\uff85\052\uff85\053\uff85\055\uff85\056\uff85\060\uff85" +
    "\062\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\077" +
    "\uff85\103\uff85\001\002\000\110\002\uff86\003\uff86\004\uff86" +
    "\006\uff86\015\uff86\017\uff86\023\uff86\024\uff86\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\047\uff86\050\uff86\052" +
    "\uff86\053\uff86\055\uff86\056\uff86\060\uff86\062\uff86\067\uff86" +
    "\070\uff86\071\uff86\072\uff86\073\uff86\077\uff86\103\uff86\001" +
    "\002\000\004\002\ufffd\001\002\000\004\004\u015c\001\002" +
    "\000\004\004\u015b\001\002\000\004\004\u015a\001\002\000" +
    "\004\004\u0159\001\002\000\006\004\u0158\102\u0157\001\002" +
    "\000\004\016\uff80\001\002\000\004\016\uff8b\001\002\000" +
    "\004\016\uff87\001\002\000\004\016\uff8a\001\002\000\004" +
    "\016\uff89\001\002\000\004\016\uff88\001\002\000\014\002" +
    "\ufff5\003\020\023\011\047\021\050\022\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\006\003\004\054\003\001\001\000\026\004" +
    "\016\012\006\013\011\032\013\033\012\046\022\047\007" +
    "\050\023\052\015\053\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\016\012\006\013\011\032\013" +
    "\033\012\046\u015e\047\007\050\023\052\015\053\014\001" +
    "\001\000\004\016\276\001\001\000\002\001\001\000\026" +
    "\004\016\012\006\013\011\032\013\033\012\046\u0150\047" +
    "\007\050\023\052\015\053\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\016\012\006\013\011\032" +
    "\013\033\012\046\233\047\007\050\023\052\015\053\014" +
    "\001\001\000\026\004\016\012\006\013\011\032\013\033" +
    "\012\046\232\047\007\050\023\052\015\053\014\001\001" +
    "\000\002\001\001\000\026\004\016\012\006\013\011\032" +
    "\013\033\012\046\227\047\007\050\023\052\015\053\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\024\001\001\000\002\001\001\000\032" +
    "\007\044\010\051\011\055\021\037\034\164\035\064\036" +
    "\047\037\052\041\040\042\065\043\033\045\067\001\001" +
    "\000\002\001\001\000\026\004\016\012\006\013\011\032" +
    "\013\033\012\046\030\047\007\050\023\052\015\053\014" +
    "\001\001\000\002\001\001\000\032\007\044\010\051\011" +
    "\055\021\037\034\034\035\064\036\047\037\052\041\040" +
    "\042\065\043\033\045\067\001\001\000\004\021\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\150" +
    "\010\051\011\055\021\037\035\153\036\152\037\052\041" +
    "\040\042\065\043\033\045\067\001\001\000\004\037\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\150" +
    "\010\051\011\055\021\037\035\151\037\052\041\040\042" +
    "\065\043\033\045\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\110\010\051\011\055\021\037\035\111\037\052\041\040" +
    "\042\065\043\033\045\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\071\001\001\000\006\042\065\043\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\044\010\051\011\055\021\037\034\074\035\064\036" +
    "\047\037\052\041\040\042\065\043\033\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\133\010\051\011\055" +
    "\021\037\041\040\042\065\043\033\045\067\001\001\000" +
    "\020\010\051\011\132\021\037\041\040\042\065\043\033" +
    "\045\067\001\001\000\020\010\051\011\117\021\037\041" +
    "\040\042\065\043\033\045\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\121\010\051\011\055\021" +
    "\037\041\040\042\065\043\033\045\067\001\001\000\002" +
    "\001\001\000\016\010\131\021\037\041\040\042\065\043" +
    "\033\045\067\001\001\000\016\010\130\021\037\041\040" +
    "\042\065\043\033\045\067\001\001\000\016\010\127\021" +
    "\037\041\040\042\065\043\033\045\067\001\001\000\016" +
    "\010\126\021\037\041\040\042\065\043\033\045\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\007\044\010\051\011\055\021\037" +
    "\034\142\035\064\036\047\037\052\041\040\042\065\043" +
    "\033\044\143\045\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\044\010\051\011\055\021\037\034\142\035" +
    "\064\036\047\037\052\041\040\042\065\043\033\044\147" +
    "\045\067\001\001\000\002\001\001\000\004\037\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\071" +
    "\001\001\000\002\001\001\000\032\007\044\010\051\011" +
    "\055\021\037\034\156\035\064\036\047\037\052\041\040" +
    "\042\065\043\033\045\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\162\010\051" +
    "\011\055\021\037\041\040\042\065\043\033\045\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\016\012\006\013\011\032\013\033\012\046\231\047\007" +
    "\050\023\052\015\053\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\004\261\005\241" +
    "\006\251\007\044\010\051\011\055\012\265\013\246\014" +
    "\250\015\247\017\266\021\037\024\272\026\235\027\255" +
    "\030\244\031\264\032\013\033\012\034\262\035\064\036" +
    "\047\037\052\041\040\042\065\043\033\045\067\047\271" +
    "\050\270\051\243\052\260\053\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\u0122\051\u0123\001\001\000\002" +
    "\001\001\000\004\016\365\001\001\000\002\001\001\000" +
    "\100\004\341\005\327\007\044\010\051\011\055\012\345" +
    "\013\332\014\334\015\333\017\346\021\037\024\351\026" +
    "\325\027\335\030\331\031\344\032\013\033\012\034\343" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\047\350\050\347\051\330\052\340\053\337\001\001" +
    "\000\006\022\u0109\023\u010a\001\001\000\102\004\261\005" +
    "\241\006\375\007\044\010\051\011\055\012\265\013\246" +
    "\014\250\015\247\017\266\021\037\024\272\026\235\027" +
    "\255\030\244\031\264\032\013\033\012\034\376\035\064" +
    "\036\047\037\052\041\040\042\065\043\033\045\067\047" +
    "\271\050\270\051\243\052\260\053\256\001\001\000\032" +
    "\007\044\010\051\011\055\021\037\034\323\035\064\036" +
    "\047\037\052\041\040\042\065\043\033\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\110\010\051\011\055\021\037" +
    "\035\111\037\052\041\040\042\065\043\033\045\067\001" +
    "\001\000\004\005\024\001\001\000\004\016\276\001\001" +
    "\000\002\001\001\000\004\040\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\302\010\051\011\055\020" +
    "\303\021\037\041\040\042\065\043\033\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\302\010\051\011\055\020\307" +
    "\021\037\041\040\042\065\043\033\045\067\001\001\000" +
    "\002\001\001\000\024\007\302\010\051\011\055\020\311" +
    "\021\037\041\040\042\065\043\033\045\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\004" +
    "\261\005\241\006\320\007\044\010\051\011\055\012\265" +
    "\013\246\014\250\015\247\017\266\021\037\024\272\026" +
    "\235\027\255\030\244\031\264\032\013\033\012\034\262" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\047\271\050\270\051\243\052\260\053\256\001\001" +
    "\000\100\004\341\005\327\007\044\010\051\011\055\012" +
    "\345\013\332\014\334\015\333\017\346\021\037\024\351" +
    "\026\325\027\335\030\331\031\344\032\013\033\012\034" +
    "\343\035\064\036\047\037\052\041\040\042\065\043\033" +
    "\045\067\047\350\050\347\051\330\052\340\053\337\001" +
    "\001\000\032\007\044\010\051\011\055\021\037\034\323" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\044\010\051\011\055\021\037\034\362" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\024\001\001\000\004\016\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\004\341\005\327\007\044\010\051\011\055\012\345" +
    "\013\332\014\334\015\333\017\346\021\037\024\351\026" +
    "\325\027\335\030\331\031\344\032\013\033\012\034\343" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\047\350\050\347\051\330\052\340\053\337\001\001" +
    "\000\002\001\001\000\032\007\044\010\051\011\055\021" +
    "\037\034\u0100\035\064\036\047\037\052\041\040\042\065" +
    "\043\033\045\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\044" +
    "\010\051\011\055\021\037\034\u0105\035\064\036\047\037" +
    "\052\041\040\042\065\043\033\045\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0114\001\001\000\002\001\001\000\032" +
    "\007\044\010\051\011\055\021\037\034\u010c\035\064\036" +
    "\047\037\052\041\040\042\065\043\033\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\102\004\261\005" +
    "\241\006\u010f\007\044\010\051\011\055\012\265\013\246" +
    "\014\250\015\247\017\266\021\037\024\272\026\235\027" +
    "\255\030\244\031\264\032\013\033\012\034\262\035\064" +
    "\036\047\037\052\041\040\042\065\043\033\045\067\047" +
    "\271\050\270\051\243\052\260\053\256\001\001\000\100" +
    "\004\341\005\327\007\044\010\051\011\055\012\345\013" +
    "\332\014\334\015\333\017\346\021\037\024\351\026\325" +
    "\027\335\030\331\031\344\032\013\033\012\034\343\035" +
    "\064\036\047\037\052\041\040\042\065\043\033\045\067" +
    "\047\350\050\347\051\330\052\340\053\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\044\010\051\011" +
    "\055\021\037\034\u0116\035\064\036\047\037\052\041\040" +
    "\042\065\043\033\045\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\004\261\005\241\006\u0119\007\044" +
    "\010\051\011\055\012\265\013\246\014\250\015\247\017" +
    "\266\021\037\024\272\026\235\027\255\030\244\031\264" +
    "\032\013\033\012\034\262\035\064\036\047\037\052\041" +
    "\040\042\065\043\033\045\067\047\271\050\270\051\243" +
    "\052\260\053\256\001\001\000\100\004\341\005\327\007" +
    "\044\010\051\011\055\012\345\013\332\014\334\015\333" +
    "\017\346\021\037\024\351\026\325\027\335\030\331\031" +
    "\344\032\013\033\012\034\343\035\064\036\047\037\052" +
    "\041\040\042\065\043\033\045\067\047\350\050\347\051" +
    "\330\052\340\053\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\044\010\051\011\055\021\037\034" +
    "\u011d\035\064\036\047\037\052\041\040\042\065\043\033" +
    "\045\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\044\010\051" +
    "\011\055\021\037\034\u012e\035\064\036\047\037\052\041" +
    "\040\042\065\043\033\045\067\001\001\000\032\007\044" +
    "\010\051\011\055\021\037\034\u0129\035\064\036\047\037" +
    "\052\041\040\042\065\043\033\045\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\004\261\005\241\006" +
    "\u012c\007\044\010\051\011\055\012\265\013\246\014\250" +
    "\015\247\017\266\021\037\024\272\026\235\027\255\030" +
    "\244\031\264\032\013\033\012\034\262\035\064\036\047" +
    "\037\052\041\040\042\065\043\033\045\067\047\271\050" +
    "\270\051\243\052\260\053\256\001\001\000\100\004\341" +
    "\005\327\007\044\010\051\011\055\012\345\013\332\014" +
    "\334\015\333\017\346\021\037\024\351\026\325\027\335" +
    "\030\331\031\344\032\013\033\012\034\343\035\064\036" +
    "\047\037\052\041\040\042\065\043\033\045\067\047\350" +
    "\050\347\051\330\052\340\053\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\004\261" +
    "\005\241\006\u0131\007\044\010\051\011\055\012\265\013" +
    "\246\014\250\015\247\017\266\021\037\024\272\026\235" +
    "\027\255\030\244\031\264\032\013\033\012\034\262\035" +
    "\064\036\047\037\052\041\040\042\065\043\033\045\067" +
    "\047\271\050\270\051\243\052\260\053\256\001\001\000" +
    "\100\004\341\005\327\007\044\010\051\011\055\012\345" +
    "\013\332\014\334\015\333\017\346\021\037\024\351\026" +
    "\325\027\335\030\331\031\344\032\013\033\012\034\343" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\047\350\050\347\051\330\052\340\053\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\004" +
    "\261\005\241\006\u0149\007\044\010\051\011\055\012\265" +
    "\013\246\014\250\015\247\017\266\021\037\024\272\026" +
    "\235\027\255\030\244\031\264\032\013\033\012\034\262" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\047\271\050\270\051\243\052\260\053\256\001\001" +
    "\000\100\004\341\005\327\007\044\010\051\011\055\012" +
    "\345\013\332\014\334\015\333\017\346\021\037\024\351" +
    "\026\325\027\335\030\331\031\344\032\013\033\012\034" +
    "\343\035\064\036\047\037\052\041\040\042\065\043\033" +
    "\045\067\047\350\050\347\051\330\052\340\053\337\001" +
    "\001\000\032\007\044\010\051\011\055\021\037\034\u014c" +
    "\035\064\036\047\037\052\041\040\042\065\043\033\045" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\016\012\006\013" +
    "\011\032\013\033\012\046\u015d\047\007\050\023\052\015" +
    "\053\014\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;
    HashMap<String, ArrayList<String>> scopePrograma = new HashMap<String, ArrayList<String>>();
    String currentHash;
    String globalHash = "SCOPE GLOBAL";

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    public void imprimirscopePrograma () {
        System.out.println("\nTABLA DE SIMBOLOS (resumen)");
        try {
            Path outDir = Paths.get(System.getProperty("user.dir"), "programa", "output");
            Files.createDirectories(outDir);

            // Ensure there is at least a global scope entry so a file is produced even
            // when parsing didn't reach the start action that initializes scopes.
            if (scopePrograma.isEmpty()) {
                scopePrograma.put(globalHash, new ArrayList<String>());
            }

            // write a single consolidated TablaSimbolos.txt with columns: Scope,Name,Type,Line,Column
            Path tablaFile = outDir.resolve("TablaSimbolos.txt");
            Pattern p = Pattern.compile(".*:\s*([^:]+):([^:]+)(:line=(\\d+):col=(\\d+))?.*");
            try (FileWriter fw = new FileWriter(tablaFile.toFile())) {
                fw.write("Scope,Name,Type,Line,Column\n");
                for (String key: scopePrograma.keySet()) {
                    System.out.println("Scope: " + key + "  (" + scopePrograma.get(key).size() + " entradas)");
                    for (String item : scopePrograma.get(key)) {
                        String name="", type="", line="n/a", col="n/a";
                        // try to extract name and type by splitting on ':' and looking for known type tokens
                        String[] parts = item.split(":");
                        if (parts.length >= 2) {
                            name = parts[1].trim();
                        }
                        if (parts.length >= 3) {
                            // find a part that matches a known type (prefer the first following the name)
                            for (int i = 2; i < parts.length; i++) {
                                String ppart = parts[i].trim();
                                if (ppart.equals("INT") || ppart.equals("CHAR") || ppart.equals("FLOAT") || ppart.equals("BOOL") || ppart.equals("STRING") || ppart.equals("ARR") || ppart.startsWith("tipo:") || ppart.equals("MAIN")) {
                                    type = ppart;
                                    break;
                                }
                            }
                            // fallback: use the immediate next part
                            if (type.isEmpty()) type = parts[2].trim();
                        }

                        // find line/col anywhere in the item string
                        Matcher ml = Pattern.compile("line=(\\d+)").matcher(item);
                        if (ml.find()) line = ml.group(1);
                        Matcher mc = Pattern.compile("col=(\\d+)").matcher(item);
                        if (mc.find()) col = mc.group(1);

                        fw.write(key + "," + name + "," + type + "," + line + "," + col + "\n");
                    }
                }
            }

            System.out.println("Tablas de simbolos exportadas a: " + outDir.toAbsolutePath().toString());
        } catch (Exception e) {
            System.err.println("Error al exportar tablas de simbolos: " + e.getMessage());
        }
    }

    // recuperación de errores de sintaxis (mejorada)
    public void syntax_error(Symbol s) {
        try {
            if (s == null) {
                String yy = "";
                try { yy = lex.yytext(); } catch (Exception e) { yy = "<no-yytext>"; }
                System.err.println("!!Error de Sintaxis: símbolo nulo (fin de fichero probable). yytext='" + yy + "'");
                return;
            }

            int symId = s.sym;
            Object val = s.value;
            int left = s.left;
            int right = s.right;
            String yytext = "";
            try { yytext = lex.yytext(); } catch (Exception e) { yytext = "<no-yytext>"; }

            System.err.println("!!Error de Sintaxis: tokenId=" + symId + " value=" + val + " yytext='" + yytext + "' linea:" + (left>=0 ? (left+1) : "n/a") + " columna:" + (right>=0 ? (right+1) : "n/a"));

        } catch (Exception e) {
            System.err.println("!!Error de Sintaxis (excepción al informar): " + e.getMessage());
        }
    }

    // manejo de errores fatales (mejorado)
    public void unrecovered_syntax_error(Symbol s) {
        try {
            if (s == null) {
                String yy = "";
                try { yy = lex.yytext(); } catch (Exception e) { yy = "<no-yytext>"; }
                System.err.println("!!Error fatal: símbolo nulo. yytext='" + yy + "'");
                return;
            }

            int symId = s.sym;
            Object val = s.value;
            int left = s.left;
            int right = s.right;
            String yytext = "";
            try { yytext = lex.yytext(); } catch (Exception e) { yytext = "<no-yytext>"; }

            System.err.println("!!Error fatal: tokenId=" + symId + " value=" + val + " yytext='" + yytext + "' linea:" + (left>=0 ? (left+1) : "n/a") + " columna:" + (right>=0 ? (right+1) : "n/a"));

        } catch (Exception e) {
            System.err.println("!!Error fatal (excepción al informar): " + e.getMessage());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 scopePrograma.put(globalHash, new ArrayList<String>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= NT$0 PRINCIPAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 imprimirscopePrograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRINCIPAL ::= funcStruct PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRINCIPAL ::= mainStruct PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPAL ::= arrayInsGl DOLLAR PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PRINCIPAL ::= varInsGl DOLLAR PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PRINCIPAL ::= varIns DOLLAR PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PRINCIPAL ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PRINCIPAL ::= varInsAsigGl PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PRINCIPAL ::= funcStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PRINCIPAL ::= mainStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PRINCIPAL ::= arrayInsGl DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PRINCIPAL ::= varInsGl DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PRINCIPAL ::= varIns DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PRINCIPAL ::= error PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PRINCIPAL ::= arrayInsAsignGl PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PRINCIPAL ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= BLOCK exprP DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= BLOCK varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK ::= BLOCK arrayInsGl DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOCK ::= BLOCK varInsGl DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOCK ::= BLOCK varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOCK ::= BLOCK arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOCK ::= BLOCK mainStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOCK ::= BLOCK funcStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOCK ::= BLOCK varIns DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOCK ::= BLOCK decideOfStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOCK ::= BLOCK decideOfElseStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOCK ::= BLOCK loopStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOCK ::= BLOCK forStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOCK ::= BLOCK arrayIns DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOCK ::= BLOCK varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOCK ::= BLOCK arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOCK ::= BLOCK inputStruct DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOCK ::= BLOCK outPutStruct DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOCK ::= BLOCK BREAK DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOCK ::= BLOCK RETURN exprP DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOCK ::= BLOCK RETURN DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOCK ::= exprP DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOCK ::= arrayIns DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOCK ::= arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOCK ::= mainStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOCK ::= funcStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOCK ::= arrayInsGl DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOCK ::= varInsGl DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOCK ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOCK ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOCK ::= varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCK ::= varIns DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCK ::= decideOfStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCK ::= decideOfElseStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOCK ::= forStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOCK ::= loopStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOCK ::= outPutStruct DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOCK ::= BREAK DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOCK ::= RETURN exprP DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOCK ::= RETURN DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOCK ::= inputStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCK ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // numbers ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // numbers ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compAritOp ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compAritOp ::= compAritOp MAS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo SUMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compAritOp ::= compAritOp MENOS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo RESTA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term MULTI factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo PRODUCTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term DIV factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo COCIENTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term POTENCIA factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo POTENCIA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term FLOAT_DIV factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo MODULO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= numbers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= MENOS numbers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= CHARSTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= IDENTIFIER DMENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= IDENTIFIER DMAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= arrayElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= funcInvo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= MENOS UKRA compAritOp RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= UKRA compAritOp RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inputStruct ::= INPUT UKRA IDENTIFIER RUSS DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStruct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exprP ::= exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exprP ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exprP ::= exprUni 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprLog ::= UKRA exprLog RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprLog ::= opRel exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exprLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exprLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Operacion logica realizada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Operacion logica localizada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;
		 System.out.println("Operacion unitaria"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opRel ::= GREATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opRel ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opRel ::= MORE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opRel ::= COMPARA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opRel ::= NEGA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // varAsig ::= IDENTIFIER EQ exprP DOLLAR 
            {
              Object RESULT =null;
		System.out.println("Se asigno Variable");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // varAsig ::= EQ exprP DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // varIns ::= LET INT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia: " + ID.toString() + ":" + "INT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // varIns ::= LET CHAR IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia: " + ID.toString() + ":" + "CHAR" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // varIns ::= LET FLOAT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia: " + ID.toString() + ":" + "FLOAT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // varIns ::= LET BOOL IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia: " + ID.toString() + ":" + "BOOL" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // varIns ::= LET STRING IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia: " + ID.toString() + ":" + "STRING" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // varInsGl ::= GLOBAL LET INT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOBAL: " + ID.toString() + ":" + "INT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // varInsGl ::= GLOBAL LET CHAR IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOBAL: " + ID.toString() + ":" + "CHAR" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // varInsGl ::= GLOBAL LET FLOAT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOBAL: " + ID.toString() + ":" + "FLOAT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // varInsGl ::= GLOBAL LET STRING IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOBAL: " + ID.toString() + ":" + "STRING" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // varInsGl ::= GLOBAL LET BOOL IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOBAL: " + ID.toString() + ":" + "BOOL" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // varInsAsig ::= varIns varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsig",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // varInsAsigGl ::= varInsGl varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsigGl",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funInitial ::= FUNC INT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:INT";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // funInitial ::= FUNC CHAR IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:CHAR";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funInitial ::= FUNC BOOL IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:BOOL";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // funInitial ::= FUNC STRING IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:STRING";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funInitial ::= FUNC FLOAT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:FLOAT";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funcStruct ::= funInitial INIT_BLOCK BLOCK RETURN DOLLAR END_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruct",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcStruct ::= funInitial INIT_BLOCK BLOCK RETURN exprP DOLLAR END_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruct",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // paramFunc ::= exprP COMA paramFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // paramFunc ::= exprP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcInvo ::= IDENTIFIER UKRA paramFunc RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // funcInvo ::= IDENTIFIER UKRA RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mainInitial ::= FUNC INT MAIN 
            {
              Object RESULT =null;
		                       String tipo;
                                                         tipo = "tipo:MAIN:INT";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = "MAIN";
                                                         fun.add(tipo);
                                                         scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainInitial",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mainStruct ::= mainInitial INIT_BLOCK RETURN DOLLAR END_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruct",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // mainStruct ::= mainInitial INIT_BLOCK BLOCK RETURN exprP DOLLAR END_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruct",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // decideOfStruct ::= DECIDE_OF decideOfCases END_DECIDE DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfStruct",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // decideOfCases ::= 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura decide of sin cuerpo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfCases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // decideOfCases ::= decideOfCase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfCases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // decideOfCases ::= decideOfCase decideOfElseStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfCases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // decideOfCase ::= UKRA exprP ARROW INIT_BLOCK BLOCK END_BLOCK RUSS 
            {
              Object RESULT =null;
		System.out.println("Se declaro caso de decide of");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfCase",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // decideOfCase ::= decideOfCase UKRA exprP ARROW INIT_BLOCK BLOCK END_BLOCK RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfCase",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // decideOfElseStruct ::= UKRA ELSE ARROW INIT_BLOCK BLOCK END_BLOCK RUSS 
            {
              Object RESULT =null;
		System.out.println("Se declaro else de decide of");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decideOfElseStruct",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // loopStruct ::= LOOP exprP EXIT_WHEN exprP DOLLAR END_LOOP DOLLAR 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura loop con expresion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopStruct",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // loopStruct ::= LOOP BLOCK EXIT_WHEN exprP DOLLAR END_LOOP DOLLAR 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura loop con bloque");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopStruct",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // forStruct ::= FOR varInsAsig STEP INT UKRA TO exprP DO INIT_BLOCK BLOCK END_BLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura for con to");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruct",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // forStruct ::= FOR varInsAsig STEP INT UKRA DOWNTO exprP DO INIT_BLOCK BLOCK END_BLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura for con downto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruct",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arrayIns ::= INT ARRAY IDENTIFIER SQUARES INT_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia local ARR: " + ID.toString() + ":" + "INT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arrayIns ::= CHAR ARRAY IDENTIFIER SQUARES INT_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 String target = (currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia local ARR: " + ID.toString() + ":" + "CHAR" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arrayInsGl ::= GLOBAL INT ARRAY IDENTIFIER SQUARES INT_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 scopePrograma.get(globalHash).add("Instancia global ARR: " + ID.toString() + ":" + "INT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arrayInsGl ::= GLOBAL CHAR ARRAY IDENTIFIER SQUARES INT_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 scopePrograma.get(globalHash).add("Instancia global ARR: " + ID.toString() + ":" + "CHAR" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arrayAsig ::= IDENTIFIER EQ SQUARES elementos SQUAREC DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arrayAsig ::= EQ SQUARES elementos SQUAREC DOLLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // elementos ::= compAritOp COMA elementos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // elementos ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // arrayInsAsign ::= arrayIns arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arrayInsAsignGl ::= arrayInsGl arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsignGl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arrayElement ::= IDENTIFIER SQUARES INT_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayElement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // paramStruct ::= PARAM INT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target=(currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia PARAM: " + ID.toString() + ":" + "INT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruct",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // paramStruct ::= PARAM CHAR IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target=(currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia PARAM: " + ID.toString() + ":" + "CHAR" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruct",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // paramStruct ::= PARAM STRING IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target=(currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia PARAM: " + ID.toString() + ":" + "STRING" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruct",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paramStruct ::= PARAM FLOAT IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target=(currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia PARAM: " + ID.toString() + ":" + "FLOAT" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruct",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paramStruct ::= PARAM BOOL IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String target=(currentHash!=null?currentHash:globalHash); scopePrograma.get(target).add("Instancia PARAM: " + ID.toString() + ":" + "BOOL" + ":line=" + (IDleft+1) + ":col=" + (IDright+1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruct",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // paramList ::= paramStruct paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // paramList ::= paramStruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // outPutStruct ::= OUTPUT UKRA IDENTIFIER RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outPutStruct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // outPutStruct ::= OUTPUT UKRA CHARSTR RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outPutStruct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // outPutStruct ::= OUTPUT UKRA STRING_LITERAL RUSS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outPutStruct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
