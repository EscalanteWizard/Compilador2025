// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

/* JFlex example: partial Java language lexer specification */
import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 */

@SuppressWarnings("fallthrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARSTR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\2\u0100\1\u0200\1\u0300\u10fb\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\2\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\32\30\1\31"+
    "\1\32\1\33\1\34\1\30\1\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\30\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\30\1\54\1\55"+
    "\1\56\1\57\1\30\1\60\1\61\1\62\1\30\1\0"+
    "\1\63\1\0\1\64\42\0\1\65\35\0\1\66\u01e3\0"+
    "\1\67\140\0\1\70\50\0\1\71\322\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\16\25\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\40\1\43\1\42\1\44"+
    "\1\45\1\46\1\47\1\50\1\0\1\51\1\0\1\50"+
    "\1\52\1\53\1\54\5\25\1\55\20\25\1\56\1\25"+
    "\1\57\1\60\1\61\1\62\1\63\2\0\1\2\13\25"+
    "\1\64\3\25\1\65\1\66\11\25\1\0\1\2\1\25"+
    "\1\67\1\25\1\70\2\25\1\71\1\0\3\25\1\72"+
    "\2\25\1\73\5\25\1\74\1\25\1\75\1\76\1\25"+
    "\1\77\2\25\3\0\1\100\1\101\1\25\1\102\1\25"+
    "\1\103\6\25\1\104\3\0\1\105\1\106\2\25\1\107"+
    "\1\110\1\111\4\0\2\25\2\0\1\112\1\0\1\25"+
    "\1\113\1\114\1\0\1\115\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\256\0\350\0\u0122\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\u015c\0\256\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\256"+
    "\0\256\0\u0366\0\256\0\256\0\256\0\u03a0\0\u03da\0\u0414"+
    "\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\u06cc\0\256\0\u0706\0\u0740\0\256\0\u077a"+
    "\0\256\0\256\0\256\0\256\0\u01d0\0\u07b4\0\u07ee\0\u01d0"+
    "\0\u0244\0\256\0\256\0\256\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0366\0\u0d24\0\256\0\256\0\256\0\256"+
    "\0\256\0\u0d5e\0\u0d98\0\u07ee\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u0366"+
    "\0\u1050\0\u108a\0\u10c4\0\u0366\0\u0366\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u0d5e"+
    "\0\u1342\0\u137c\0\u13b6\0\u0366\0\u13f0\0\u142a\0\u0366\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u0366\0\u154c\0\u1586\0\u0366\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u0366\0\u16e2\0\u0366\0\u0366"+
    "\0\u171c\0\u0366\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u0366"+
    "\0\u0366\0\u1878\0\u0366\0\u18b2\0\u0366\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u0366\0\u1a48\0\u1a82\0\u1abc\0\u0366"+
    "\0\u0366\0\u1af6\0\u1b30\0\u0366\0\u0366\0\u0366\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\256\0\u1d3a"+
    "\0\u1d74\0\u0366\0\256\0\u1dae\0\256\0\u0366\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\4\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\32\1\45\1\32\1\46\2\32"+
    "\1\47\1\50\1\51\1\52\1\53\4\32\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\2\63\2\4\2\63"+
    "\1\64\23\63\1\65\37\63\2\66\2\4\4\66\1\67"+
    "\21\66\1\70\37\66\74\0\1\5\113\0\1\71\61\0"+
    "\1\72\73\0\1\73\6\0\1\74\65\0\2\75\62\0"+
    "\1\76\4\0\1\77\70\0\1\100\1\0\2\101\66\0"+
    "\1\100\1\0\2\24\73\0\1\102\71\0\1\103\71\0"+
    "\1\104\66\0\2\32\5\0\1\32\4\0\26\32\30\0"+
    "\2\32\5\0\1\32\4\0\17\32\1\105\6\32\30\0"+
    "\2\32\5\0\1\32\4\0\15\32\1\106\1\32\1\107"+
    "\6\32\30\0\2\32\5\0\1\32\4\0\7\32\1\110"+
    "\16\32\30\0\2\32\5\0\1\32\4\0\4\32\1\111"+
    "\10\32\1\112\10\32\30\0\2\32\5\0\1\32\4\0"+
    "\12\32\1\113\1\32\1\114\7\32\1\115\1\32\30\0"+
    "\2\32\5\0\1\32\4\0\1\116\11\32\1\117\2\32"+
    "\1\120\4\32\1\121\3\32\30\0\2\32\5\0\1\32"+
    "\4\0\12\32\1\122\13\32\30\0\2\32\5\0\1\32"+
    "\4\0\14\32\1\123\11\32\30\0\2\32\5\0\1\32"+
    "\4\0\4\32\1\124\10\32\1\125\10\32\30\0\2\32"+
    "\5\0\1\32\4\0\22\32\1\126\3\32\30\0\2\32"+
    "\5\0\1\32\4\0\1\127\16\32\1\130\6\32\30\0"+
    "\2\32\5\0\1\32\4\0\4\32\1\131\21\32\30\0"+
    "\2\32\5\0\1\32\4\0\21\32\1\132\4\32\30\0"+
    "\2\32\5\0\1\32\4\0\15\32\1\133\1\32\1\134"+
    "\6\32\7\0\2\63\2\0\2\63\1\0\23\63\1\0"+
    "\37\63\6\0\1\135\42\0\1\136\2\0\1\137\1\0"+
    "\1\140\13\0\2\66\2\0\4\66\1\0\21\66\1\0"+
    "\37\66\10\0\1\141\40\0\1\136\2\0\1\137\1\0"+
    "\1\140\13\0\13\142\1\143\56\142\2\144\1\5\1\6"+
    "\66\144\21\0\2\32\5\0\1\32\4\0\17\32\1\145"+
    "\6\32\30\0\2\32\5\0\1\32\4\0\15\32\1\146"+
    "\10\32\30\0\2\32\5\0\1\32\4\0\4\32\1\147"+
    "\21\32\30\0\2\32\5\0\1\32\4\0\1\150\25\32"+
    "\30\0\2\32\5\0\1\32\4\0\2\32\1\151\23\32"+
    "\30\0\2\32\5\0\1\32\4\0\23\32\1\152\2\32"+
    "\30\0\2\32\5\0\1\32\4\0\20\32\1\153\5\32"+
    "\30\0\2\32\5\0\1\32\4\0\3\32\1\154\22\32"+
    "\30\0\2\32\5\0\1\32\4\0\10\32\1\155\15\32"+
    "\30\0\2\32\5\0\1\32\4\0\12\32\1\156\13\32"+
    "\30\0\2\32\5\0\1\32\4\0\15\32\1\157\10\32"+
    "\30\0\2\32\5\0\1\32\4\0\17\32\1\160\6\32"+
    "\30\0\2\32\5\0\1\32\4\0\14\32\1\161\11\32"+
    "\30\0\2\32\5\0\1\32\4\0\15\32\1\162\10\32"+
    "\30\0\2\32\5\0\1\32\4\0\16\32\1\163\2\32"+
    "\1\164\4\32\30\0\2\32\5\0\1\32\4\0\21\32"+
    "\1\165\4\32\30\0\2\32\5\0\1\32\4\0\15\32"+
    "\1\166\10\32\30\0\2\32\5\0\1\32\4\0\21\32"+
    "\1\167\4\32\30\0\2\32\5\0\1\32\4\0\17\32"+
    "\1\170\6\32\30\0\2\32\5\0\1\32\4\0\10\32"+
    "\1\171\4\32\1\172\10\32\30\0\2\32\5\0\1\32"+
    "\4\0\21\32\1\173\4\32\30\0\2\32\5\0\1\32"+
    "\4\0\4\32\1\174\12\32\1\175\6\32\30\0\2\32"+
    "\5\0\1\32\4\0\22\32\1\176\3\32\7\0\13\142"+
    "\1\177\71\142\1\177\4\142\1\200\51\142\21\0\2\32"+
    "\5\0\1\32\4\0\1\201\25\32\30\0\2\32\5\0"+
    "\1\32\4\0\12\32\1\202\13\32\30\0\2\32\5\0"+
    "\1\32\4\0\1\203\25\32\30\0\2\32\5\0\1\32"+
    "\4\0\17\32\1\204\6\32\30\0\2\32\5\0\1\32"+
    "\4\0\10\32\1\205\15\32\30\0\2\32\5\0\1\32"+
    "\4\0\14\32\1\206\11\32\30\0\2\32\5\0\1\32"+
    "\4\0\4\32\1\207\21\32\13\0\1\210\14\0\2\32"+
    "\5\0\1\32\4\0\26\32\30\0\2\32\5\0\1\32"+
    "\4\0\21\32\1\211\4\32\30\0\2\32\5\0\1\32"+
    "\4\0\20\32\1\212\5\32\30\0\2\32\5\0\1\32"+
    "\4\0\1\213\25\32\30\0\2\32\5\0\1\32\4\0"+
    "\2\32\1\214\23\32\30\0\2\32\5\0\1\32\4\0"+
    "\1\32\1\215\24\32\30\0\2\32\5\0\1\32\4\0"+
    "\22\32\1\216\3\32\30\0\2\32\5\0\1\32\4\0"+
    "\16\32\1\217\7\32\30\0\2\32\5\0\1\32\4\0"+
    "\16\32\1\220\7\32\30\0\2\32\5\0\1\32\4\0"+
    "\1\221\25\32\30\0\2\32\5\0\1\32\4\0\14\32"+
    "\1\222\11\32\30\0\2\32\5\0\1\32\4\0\6\32"+
    "\1\223\17\32\30\0\2\32\5\0\1\32\4\0\22\32"+
    "\1\224\3\32\30\0\2\32\5\0\1\32\4\0\16\32"+
    "\1\225\7\32\30\0\2\32\5\0\1\32\4\0\10\32"+
    "\1\226\15\32\30\0\2\32\5\0\1\32\4\0\4\32"+
    "\1\227\21\32\7\0\13\142\1\177\4\142\1\5\51\142"+
    "\21\0\2\32\5\0\1\32\4\0\25\32\1\230\30\0"+
    "\2\32\5\0\1\32\4\0\4\32\1\231\21\32\30\0"+
    "\2\32\5\0\1\32\4\0\11\32\1\232\14\32\30\0"+
    "\2\32\5\0\1\32\4\0\3\32\1\233\22\32\30\0"+
    "\2\32\5\0\1\32\4\0\21\32\1\234\4\32\47\0"+
    "\1\235\6\0\1\236\26\0\1\237\14\0\2\32\5\0"+
    "\1\32\4\0\26\32\30\0\2\32\5\0\1\32\4\0"+
    "\4\32\1\240\21\32\30\0\2\32\5\0\1\32\4\0"+
    "\21\32\1\241\4\32\30\0\2\32\5\0\1\32\4\0"+
    "\1\242\25\32\30\0\2\32\5\0\1\32\4\0\21\32"+
    "\1\243\4\32\30\0\2\32\5\0\1\32\4\0\22\32"+
    "\1\244\3\32\30\0\2\32\5\0\1\32\4\0\13\32"+
    "\1\245\12\32\30\0\2\32\5\0\1\32\4\0\2\32"+
    "\1\246\23\32\30\0\2\32\5\0\1\32\4\0\17\32"+
    "\1\247\6\32\30\0\2\32\5\0\1\32\4\0\17\32"+
    "\1\250\6\32\30\0\2\32\5\0\1\32\4\0\14\32"+
    "\1\251\11\32\30\0\2\32\5\0\1\32\4\0\1\252"+
    "\25\32\30\0\2\32\5\0\1\32\4\0\4\32\1\253"+
    "\21\32\30\0\2\32\5\0\1\32\4\0\15\32\1\254"+
    "\10\32\50\0\1\255\102\0\1\256\77\0\1\257\32\0"+
    "\2\32\5\0\1\32\4\0\12\32\1\260\13\32\30\0"+
    "\2\32\5\0\1\32\4\0\21\32\1\261\4\32\30\0"+
    "\2\32\5\0\1\32\4\0\10\32\1\262\15\32\30\0"+
    "\2\32\5\0\1\32\4\0\1\263\25\32\30\0\2\32"+
    "\5\0\1\32\4\0\14\32\1\264\11\32\30\0\2\32"+
    "\5\0\1\32\4\0\6\32\1\265\17\32\30\0\2\32"+
    "\5\0\1\32\4\0\14\32\1\266\11\32\13\0\1\267"+
    "\14\0\2\32\5\0\1\32\4\0\26\32\46\0\1\270"+
    "\104\0\1\271\63\0\1\272\46\0\2\32\5\0\1\32"+
    "\4\0\16\32\1\273\7\32\30\0\2\32\5\0\1\32"+
    "\4\0\13\32\1\274\12\32\61\0\1\275\64\0\1\276"+
    "\77\0\1\277\57\0\1\300\51\0\2\32\5\0\1\32"+
    "\4\0\1\301\25\32\30\0\2\32\5\0\1\32\4\0"+
    "\1\302\25\32\51\0\1\303\67\0\1\304\102\0\1\305"+
    "\41\0\2\32\5\0\1\32\4\0\12\32\1\306\13\32"+
    "\50\0\1\307\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7656];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\6\11\1\1\1\11\10\1\2\11"+
    "\1\1\3\11\16\1\7\11\1\1\1\11\2\1\1\11"+
    "\1\1\4\11\1\1\1\0\1\1\1\0\1\1\3\11"+
    "\30\1\5\11\2\0\33\1\1\0\10\1\1\0\24\1"+
    "\3\0\15\1\3\0\7\1\4\0\2\1\2\0\1\11"+
    "\1\0\2\1\1\11\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    // attach current lexer line/column so CUP actions get left/right
    return new Symbol(type, yyline, yycolumn, null);
  }
  private Symbol symbol(int type, Object value) {
    // attach current lexer line/column and carry the value
    return new Symbol(type, yyline, yycolumn, value);
  }
  // helper when lexer wants to supply line/column info
  private Symbol symbol(int type, int left, int right) {
    // create a Symbol with location but no value
    return new Symbol(type, left, right, null);
  }

  private Symbol symbol(int type, int left, int right, Object value) {
    return new Symbol(type, left, right, value);
  }

  // expose current position and yytext to callers
  public int getLine() {
    return yyline;
  }

  public int getColumn() {
    return yycolumn;
  }

  public String getYYText() {
    return yytext();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Carácter no válido: " + yytext());
            }
          // fall through
          case 80: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 81: break;
          case 3:
            { return symbol(sym.INIT_COMMENT);
            }
          // fall through
          case 82: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 83: break;
          case 5:
            { return symbol(sym.DOLLAR);
            }
          // fall through
          case 84: break;
          case 6:
            { string.setLength(0); yybegin(CHARSTR);
            }
          // fall through
          case 85: break;
          case 7:
            { return symbol(sym.PARENTS);
            }
          // fall through
          case 86: break;
          case 8:
            { return symbol(sym.PARENTC);
            }
          // fall through
          case 87: break;
          case 9:
            { return symbol(sym.MULTI);
            }
          // fall through
          case 88: break;
          case 10:
            { return symbol(sym.MAS);
            }
          // fall through
          case 89: break;
          case 11:
            { return symbol(sym.COMA);
            }
          // fall through
          case 90: break;
          case 12:
            { return symbol(sym.MENOS);
            }
          // fall through
          case 91: break;
          case 13:
            { System.out.println("punto"); return symbol(sym.DOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 14:
            { return symbol(sym.DIV);
            }
          // fall through
          case 93: break;
          case 15:
            { return symbol(sym.INT_LITERAL);
            }
          // fall through
          case 94: break;
          case 16:
            { return symbol(sym.LOWER);
            }
          // fall through
          case 95: break;
          case 17:
            { return symbol(sym.EQ);
            }
          // fall through
          case 96: break;
          case 18:
            { return symbol(sym.GREATHER);
            }
          // fall through
          case 97: break;
          case 19:
            { return symbol(sym.END_BLOCK);
            }
          // fall through
          case 98: break;
          case 20:
            { return symbol(sym.AND);
            }
          // fall through
          case 99: break;
          case 21:
            { return symbol(sym.IDENTIFIER, yytext());
            }
          // fall through
          case 100: break;
          case 22:
            { return symbol(sym.SQUARES);
            }
          // fall through
          case 101: break;
          case 23:
            { return symbol(sym.SQUAREC);
            }
          // fall through
          case 102: break;
          case 24:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 103: break;
          case 25:
            { return symbol(sym.COMMENT);
            }
          // fall through
          case 104: break;
          case 26:
            { return symbol(sym.OR);
            }
          // fall through
          case 105: break;
          case 27:
            { return symbol(sym.END_COMMENT);
            }
          // fall through
          case 106: break;
          case 28:
            { return symbol(sym.INIT_BLOCK);
            }
          // fall through
          case 107: break;
          case 29:
            { return symbol(sym.NEGA);
            }
          // fall through
          case 108: break;
          case 30:
            { return symbol(sym.UKRA);
            }
          // fall through
          case 109: break;
          case 31:
            { return symbol(sym.RUSS);
            }
          // fall through
          case 110: break;
          case 32:
            { string.append( yytext() );
            }
          // fall through
          case 111: break;
          case 33:
            { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
                                   string.toString());
            }
          // fall through
          case 112: break;
          case 34:
            { string.append('\\');
            }
          // fall through
          case 113: break;
          case 35:
            { yybegin(YYINITIAL); 
                                   return symbol(sym.CHARSTR,
                                   string.toString());
            }
          // fall through
          case 114: break;
          case 36:
            { return symbol(sym.DIFF);
            }
          // fall through
          case 115: break;
          case 37:
            { return symbol(sym.DMAS);
            }
          // fall through
          case 116: break;
          case 38:
            { return symbol(sym.DMENOS);
            }
          // fall through
          case 117: break;
          case 39:
            { return symbol(sym.ARROW);
            }
          // fall through
          case 118: break;
          case 40:
            { System.out.println("flotante"); return symbol(sym.FLOAT);
            }
          // fall through
          case 119: break;
          case 41:
            { return symbol(sym.FLOAT_DIV);
            }
          // fall through
          case 120: break;
          case 42:
            { return symbol(sym.LESS);
            }
          // fall through
          case 121: break;
          case 43:
            { return symbol(sym.COMPARA);
            }
          // fall through
          case 122: break;
          case 44:
            { return symbol(sym.MORE);
            }
          // fall through
          case 123: break;
          case 45:
            { return symbol(sym.DO);
            }
          // fall through
          case 124: break;
          case 46:
            { return symbol(sym.TO);
            }
          // fall through
          case 125: break;
          case 47:
            { string.append('\"');
            }
          // fall through
          case 126: break;
          case 48:
            { string.append('\n');
            }
          // fall through
          case 127: break;
          case 49:
            { string.append('\r');
            }
          // fall through
          case 128: break;
          case 50:
            { string.append('\t');
            }
          // fall through
          case 129: break;
          case 51:
            { string.append('\'');
            }
          // fall through
          case 130: break;
          case 52:
            { return symbol(sym.FOR);
            }
          // fall through
          case 131: break;
          case 53:
            { return symbol(sym.INT);
            }
          // fall through
          case 132: break;
          case 54:
            { return symbol(sym.LET);
            }
          // fall through
          case 133: break;
          case 55:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 134: break;
          case 56:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 135: break;
          case 57:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 136: break;
          case 58:
            { return symbol(sym.FUNC);
            }
          // fall through
          case 137: break;
          case 59:
            { return symbol(sym.LOOP);
            }
          // fall through
          case 138: break;
          case 60:
            { return symbol(sym.STEP);
            }
          // fall through
          case 139: break;
          case 61:
            { System.out.println("true"); return symbol(sym.TRUE);
            }
          // fall through
          case 140: break;
          case 62:
            { return symbol(sym.ARRAY);
            }
          // fall through
          case 141: break;
          case 63:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 142: break;
          case 64:
            { return symbol(sym.FALSE);
            }
          // fall through
          case 143: break;
          case 65:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 144: break;
          case 66:
            { return symbol(sym.INPUT);
            }
          // fall through
          case 145: break;
          case 67:
            { return symbol(sym.PARAM);
            }
          // fall through
          case 146: break;
          case 68:
            { return symbol(sym.DOWNTO);
            }
          // fall through
          case 147: break;
          case 69:
            { return symbol(sym.GLOBAL);
            }
          // fall through
          case 148: break;
          case 70:
            { return symbol(sym.OUTPUT);
            }
          // fall through
          case 149: break;
          case 71:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 150: break;
          case 72:
            { return symbol(sym.STRING);
            }
          // fall through
          case 151: break;
          case 73:
            { return symbol(sym.BOOL, yyline, yycolumn, yytext());
            }
          // fall through
          case 152: break;
          case 74:
            { return symbol(sym.END_LOOP);
            }
          // fall through
          case 153: break;
          case 75:
            { /* keyword 'programa' - ignored by parser grammar */
            }
          // fall through
          case 154: break;
          case 76:
            { return symbol(sym.DECIDE_OF);
            }
          // fall through
          case 155: break;
          case 77:
            { return symbol(sym.EXIT_WHEN);
            }
          // fall through
          case 156: break;
          case 78:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 157: break;
          case 79:
            { return symbol(sym.END_DECIDE);
            }
          // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
